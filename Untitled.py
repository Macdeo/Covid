{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4785aaf0",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# importing the pygame\n",
    "import pygame\n",
    "# importing request library\n",
    "import requests\n",
    "\n",
    "# setting up the width and the background color of the window\n",
    "WIDTH = 550\n",
    "background_color = (38, 38, 38)\n",
    "original_grid_element_color = (255, 255, 255)\n",
    "buffer = 5\n",
    "\n",
    "#adding API in our sudoku game\n",
    "response = requests.get(\"https://sugoku.herokuapp.com/board?difficulty=easy\")\n",
    "grid = response.json()['board']\n",
    "grid_original = [[grid[x][y] for y in range(len(grid[0]))] for x in range(len(grid))]\n",
    "\n",
    "#adding the functionality that can add the number on user bases\n",
    "def insert(win, position):\n",
    "    i,j = position[1], position[0]\n",
    "    #adding the font and its size\n",
    "    myfont = pygame.font.SysFont('Comic Sans MS', 35)\n",
    "    while True:\n",
    "        for event in pygame.event.get():\n",
    "            if event.type == pygame.QUIT:\n",
    "                return\n",
    "            if event.type == pygame.KEYDOWN:\n",
    "                   \n",
    "                if(grid_original[i-1][j-1] != 0):\n",
    "                    return\n",
    "                if(event.key == 48): #checking with 0\n",
    "                    grid[i-1][j-1] = event.key - 48\n",
    "                    pygame.draw.rect(win, background_color, (position[0]*50 + buffer, position[1]*50+ buffer,50 -2*buffer , 50 - 2*buffer))\n",
    "                    pygame.display.update()\n",
    "                    return\n",
    "                if(0 < event.key - 48 <10):  #We are checking for valid input\n",
    "                    pygame.draw.rect(win, background_color, (position[0]*50 + buffer, position[1]*50+ buffer,50 -2*buffer , 50 - 2*buffer))\n",
    "                    value = myfont.render(str(event.key-48), True, (179, 179, 179))\n",
    "                    win.blit(value, (position[0]*50 +15, position[1]*50))\n",
    "                    grid[i-1][j-1] = event.key - 48\n",
    "                    pygame.display.update()\n",
    "                    return\n",
    "                return\n",
    "            \n",
    "#initializing pygame\n",
    "def main():   \n",
    "    pygame.init()\n",
    "    win = pygame.display.set_mode((WIDTH, WIDTH)) # creating the window\n",
    "    pygame.display.set_caption(\"Sudoku\")#giving caption\n",
    "    win.fill(background_color) # filling the window with background color\n",
    "    myfont = pygame.font.SysFont('Comic Sans MS', 35)  #adding the font and its size\n",
    "    \n",
    "# creating grid\n",
    "    for i in range(0,10):\n",
    "        if(i%3 == 0):\n",
    "            #drwaing the block line (vertical)\n",
    "            pygame.draw.line(win, (255, 255, 255), (50 + 50*i, 50), (50 + 50*i ,500 ), 4 )\n",
    "            #(Horizontal)\n",
    "            pygame.draw.line(win, (255, 255, 255), (50, 50 + 50*i), (500, 50 + 50*i), 4 )\n",
    "\n",
    "        #drwaing vertical line\n",
    "        pygame.draw.line(win, (166, 166, 166), (50 + 50*i, 50), (50 + 50*i ,500 ), 2 )\n",
    "        #drwaing horizental line\n",
    "        pygame.draw.line(win, (166, 166, 166), (50, 50 + 50*i), (500, 50 + 50*i), 2 )\n",
    "    pygame.display.update()\n",
    "   \n",
    "    for i in range(0, len(grid[0])):\n",
    "        for j in range(0, len(grid[0])):\n",
    "            if(0<grid[i][j]<10):\n",
    "                value = myfont.render(str(grid[i][j]), True, original_grid_element_color)\n",
    "                win.blit(value, ((j+1)*50 + 15, (i+1)*50 ))\n",
    "    pygame.display.update()\n",
    "    \n",
    "#adding the function that if we press the quit key then the pygame window will close.   \n",
    "    while True:\n",
    "        for event in pygame.event.get():\n",
    "            if event.type == pygame.MOUSEBUTTONUP and event.button == 1:\n",
    "                pos = pygame.mouse.get_pos()\n",
    "                insert(win, (pos[0]//50, pos[1]//50))\n",
    "            if event.type == pygame.QUIT:\n",
    "                pygame.quit()\n",
    "                return\n",
    " \n",
    "main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6046150c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.1 (v3.10.1:2cd268a3a9, Dec  6 2021, 14:28:59) [Clang 13.0.0 (clang-1300.0.29.3)]"
  },
  "vscode": {
   "interpreter": {
    "hash": "aee8b7b246df8f9039afb4144a1f6fd8d2ca17a180786b69acc140d282b71a49"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
